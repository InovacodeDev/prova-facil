/**
 * @fileOverview This file defines Genkit flows to generate educational assessment questions.
 *
 * It includes flows for:
 * - Multiple Choice Questions (MCQ)
 * - True/False Questions (TF)
 * - Dissertative/Open Questions
 * - Sum Questions (Brazilian style with powers of 2)
 */
import { ai } from "@/lib/genkit/config";
import { z } from "zod";
import { QuestionsResponseSchema } from "./schemas";

// ============================================================================
// INPUT SCHEMAS
// ============================================================================

const FileContentSchema = z.object({
    name: z.string().describe("The filename"),
    type: z.string().describe("The MIME type of the file"),
    data: z.string().describe("The file content as a data URI (base64 encoded)"),
});

const GenerateQuestionsInputSchema = z.object({
    subject: z.string().describe("The subject/discipline of the questions (e.g., Mathematics, History)"),
    count: z.number().positive().describe("The number of questions to generate"),
    academicLevel: z
        .string()
        .optional()
        .describe("The academic level of the students (e.g., high_school, undergraduate)"),
    questionContext: z
        .string()
        .describe(
            "The context/level of the question: fixacao, contextualizada, teorica, estudo_caso, discursiva_aberta, letra_lei, pesquisa"
        ),
    files: z
        .array(FileContentSchema)
        .optional()
        .describe("Optional array of files (PDF, DOCX, PPTX) to use as source material for questions"),
});

export type GenerateQuestionsInput = z.infer<typeof GenerateQuestionsInputSchema>;
export type GenerateQuestionsOutput = z.infer<typeof QuestionsResponseSchema>;

// ============================================================================
// HELPER FUNCTIONS
// ============================================================================

function getContextDescription(context: string): string {
    const contexts: Record<string, string> = {
        fixacao:
            "Quest√µes r√°pidas, diretas e factuais, projetadas para refor√ßar e verificar a memoriza√ß√£o de conceitos, datas e nomes essenciais. A pergunta deve exigir uma resposta √∫nica e objetiva, testando puramente a memoriza√ß√£o de fatos cruciais.",
        contextualizada:
            "Estilo ENEM - Apresente um texto de apoio, imagem, gr√°fico ou cita√ß√£o relacionado ao conte√∫do dos arquivos fornecidos, exigindo que o aluno interprete o material e o relacione com seus conhecimentos pr√©vios. N√£o pede apenas um fato, mas exige interpreta√ß√£o e contextualiza√ß√£o temporal/espacial.",
        teorica:
            "Foca em conceitos abstratos, ideologias ou teorias presentes no material. Pe√ßa ao aluno que defina, explique ou discuta uma ideia em vez de um evento factual. A quest√£o n√£o trata de um evento espec√≠fico, mas de um conceito ideol√≥gico complexo.",
        estudo_caso:
            "Apresente um cen√°rio ou evento espec√≠fico e complexo do material fornecido, exigindo an√°lise detalhada de m√∫ltiplas vari√°veis (pol√≠ticas, √©ticas, t√©cnicas, etc.) para formar uma conclus√£o fundamentada. Transforme um evento em um caso de estudo multifacetado.",
        discursiva_aberta:
            "Uma quest√£o ampla que permite uma vasta gama de respostas corretas, desde que bem argumentadas. Valorize a profundidade da an√°lise, a capacidade de s√≠ntese e a originalidade do pensamento. N√£o h√° uma resposta √∫nica - o aluno pode argumentar sobre m√∫ltiplos fatores e construir uma tese original.",
        letra_lei:
            "Estilo Concurso - Exige conhecimento literal e detalhado de um documento, lei, data espec√≠fica ou defini√ß√£o exata presente no material. A precis√£o factual √© mais importante que a interpreta√ß√£o. A resposta √© uma quest√£o de conhecimento factual espec√≠fico, sem margem para interpreta√ß√£o.",
        pesquisa:
            "N√≠vel P√≥s-Doc - N√£o √© uma quest√£o de prova tradicional, mas um ponto de partida para uma investiga√ß√£o acad√™mica aprofundada. Formule uma pergunta que abre um campo de estudo, gerando uma tese, um artigo ou um debate acad√™mico. √â um convite √† pesquisa original, exigindo levantamento de fontes, an√°lise e formula√ß√£o de um argumento novo.",
    };

    return contexts[context] || contexts.fixacao;
}

function buildFilesContext(files?: Array<{ name?: string; type?: string; data?: string }>): string {
    if (!files || files.length === 0) {
        return "‚ö†Ô∏è ATEN√á√ÉO: NENHUM ARQUIVO FOI FORNECIDO.\n\nVoc√™ N√ÉO deve criar quest√µes neste caso. Informe o usu√°rio que √© necess√°rio fornecer arquivos com o conte√∫do para gerar quest√µes espec√≠ficas sobre o tema.";
    }

    const filesList = files.map((file, index) => `Arquivo ${index + 1}: {{media url=files.${index}.data}}`).join("\n");

    return `üìö ARQUIVOS FORNECIDOS PELO USU√ÅRIO:
${filesList}

‚ö†Ô∏è REGRA CR√çTICA: Voc√™ DEVE ler e analisar TODO o conte√∫do dos arquivos acima.
As quest√µes devem ser criadas EXCLUSIVAMENTE baseadas no conte√∫do presente nesses arquivos.
N√ÉO invente informa√ß√µes. N√ÉO use conhecimento externo al√©m do que est√° nos arquivos.
Se o usu√°rio pediu quest√µes sobre "Segunda Guerra Mundial" mas os arquivos cont√™m apenas sobre "Primeira Guerra Mundial", 
voc√™ DEVE criar quest√µes sobre "Primeira Guerra Mundial" (o conte√∫do dos arquivos).`;
}

// ============================================================================
// MULTIPLE CHOICE QUESTIONS (MCQ)
// ============================================================================

const generateMcqPrompt = ai.definePrompt({
    name: "generateMcqPrompt",
    input: { schema: GenerateQuestionsInputSchema },
    output: { schema: QuestionsResponseSchema },
    prompt: `Voc√™ √© um especialista em criar quest√µes de m√∫ltipla escolha para avalia√ß√µes educacionais.

CONTEXTO ACAD√äMICO: {{questionContextDescription}}

MATERIAL DE REFER√äNCIA:
{{filesContext}}

TAREFA: Gere {{count}} quest√µes de m√∫ltipla escolha sobre {{subject}}{{#if academicLevel}} para o n√≠vel acad√™mico: {{academicLevel}}{{/if}}.

INSTRU√á√ïES:
1. LEIA CUIDADOSAMENTE E COMPLETAMENTE todo o material fornecido nos arquivos acima
2. BASE AS QUEST√ïES EXCLUSIVAMENTE no conte√∫do real presente nos arquivos
3. N√ÉO invente informa√ß√µes que n√£o est√£o nos arquivos
4. N√ÉO use conhecimento externo al√©m do conte√∫do dos arquivos fornecidos
5. Se o t√≠tulo da avalia√ß√£o menciona um tema mas os arquivos cont√™m outro tema, SIGA O CONTE√öDO DOS ARQUIVOS
6. Crie quest√µes que sigam o contexto acad√™mico especificado
7. Se NENHUM arquivo foi fornecido, retorne um erro informando que arquivos s√£o necess√°rios

REGRAS OBRIGAT√ìRIAS:
1. Cada quest√£o DEVE ter exatamente 5 alternativas
2. Apenas UMA alternativa deve estar correta (is_correct: true)
3. A alternativa correta deve estar em uma posi√ß√£o ALEAT√ìRIA (n√£o apenas na primeira posi√ß√£o)
4. As alternativas incorretas devem ser plaus√≠veis mas claramente erradas
5. A quest√£o deve ser clara e objetiva
6. Evite pegadinhas, foque em avaliar conhecimento real
7. Use linguagem apropriada para o n√≠vel acad√™mico
8. IMPORTANTE: Varie a posi√ß√£o da resposta correta - ela pode ser a primeira, segunda, terceira, quarta ou quinta alternativa

FORMATO DE SA√çDA (JSON):
{
  "questions": [
    {
      "question": {
        "type": "multiple_choice",
        "question": "Texto da pergunta aqui?"
      },
      "answers": [
        {"answer": "Alternativa incorreta 1", "is_correct": false},
        {"answer": "Alternativa correta", "is_correct": true},
        {"answer": "Alternativa incorreta 2", "is_correct": false},
        {"answer": "Alternativa incorreta 3", "is_correct": false},
        {"answer": "Alternativa incorreta 4", "is_correct": false}
      ]
    }
  ]
}

EXEMPLO DE BOA PR√ÅTICA - Varie a posi√ß√£o da resposta correta:
- Quest√£o 1: resposta correta na posi√ß√£o 2
- Quest√£o 2: resposta correta na posi√ß√£o 4
- Quest√£o 3: resposta correta na posi√ß√£o 1
- Quest√£o 4: resposta correta na posi√ß√£o 5
- Quest√£o 5: resposta correta na posi√ß√£o 3

Gere as quest√µes agora:`,
});

export async function generateMcqQuestions(input: GenerateQuestionsInput): Promise<GenerateQuestionsOutput> {
    const questionContextDescription = getContextDescription(input.questionContext);
    const filesContext = buildFilesContext(input.files);

    return await generateMcqFlow({
        ...input,
        questionContextDescription,
        filesContext,
    } as any);
}

const generateMcqFlow = ai.defineFlow(
    {
        name: "generateMcqFlow",
        inputSchema: GenerateQuestionsInputSchema.extend({
            questionContextDescription: z.string(),
            filesContext: z.string(),
        }),
        outputSchema: QuestionsResponseSchema,
    },
    async (input: any) => {
        const { output } = await generateMcqPrompt(input);
        return output!;
    }
);

// ============================================================================
// TRUE/FALSE QUESTIONS (TF)
// ============================================================================

const generateTfPrompt = ai.definePrompt({
    name: "generateTfPrompt",
    input: {
        schema: GenerateQuestionsInputSchema.extend({
            questionContextDescription: z.string(),
            filesContext: z.string(),
        }),
    },
    output: { schema: QuestionsResponseSchema },
    prompt: `Voc√™ √© um especialista em criar quest√µes de verdadeiro ou falso para avalia√ß√µes educacionais.

CONTEXTO ACAD√äMICO: {{questionContextDescription}}

MATERIAL DE REFER√äNCIA:
{{filesContext}}

TAREFA: Gere {{count}} quest√µes de verdadeiro/falso sobre {{subject}}{{#if academicLevel}} para o n√≠vel acad√™mico: {{academicLevel}}{{/if}}.

INSTRU√á√ïES:
1. LEIA CUIDADOSAMENTE E COMPLETAMENTE todo o material fornecido nos arquivos acima
2. BASE AS QUEST√ïES EXCLUSIVAMENTE no conte√∫do real presente nos arquivos
3. N√ÉO invente informa√ß√µes que n√£o est√£o nos arquivos
4. N√ÉO use conhecimento externo al√©m do conte√∫do dos arquivos fornecidos
5. Se o t√≠tulo da avalia√ß√£o menciona um tema mas os arquivos cont√™m outro tema, SIGA O CONTE√öDO DOS ARQUIVOS
6. Crie quest√µes que sigam o contexto acad√™mico especificado
7. Se NENHUM arquivo foi fornecido, retorne um erro informando que arquivos s√£o necess√°rios

REGRAS OBRIGAT√ìRIAS:
1. Cada quest√£o DEVE ter exatamente 5 afirma√ß√µes
2. Cada afirma√ß√£o deve ser uma senten√ßa completa e independente
3. A quantidade de afirma√ß√µes verdadeiras (is_correct: true) deve ser ALEAT√ìRIA (pode ser 0, 1, 2, 3, 4 ou 5)
4. As afirma√ß√µes devem testar conhecimento real, n√£o pegadinhas
5. Evite afirma√ß√µes muito √≥bvias ou muito obscuras
6. O enunciado da quest√£o deve ser: "Marque V para verdadeiro e F para falso:"

FORMATO DE SA√çDA (JSON):
{
  "questions": [
    {
      "question": {
        "type": "true_false",
        "question": "Marque V para verdadeiro e F para falso:"
      },
      "answers": [
        {"answer": "Afirma√ß√£o completa sobre o tema.", "is_correct": true},
        {"answer": "Outra afirma√ß√£o completa sobre o tema.", "is_correct": false},
        {"answer": "Mais uma afirma√ß√£o sobre o tema.", "is_correct": true},
        {"answer": "Afirma√ß√£o adicional sobre o tema.", "is_correct": false},
        {"answer": "√öltima afirma√ß√£o sobre o tema.", "is_correct": true}
      ]
    }
  ]
}

Gere as quest√µes agora:`,
});

export async function generateTfQuestions(input: GenerateQuestionsInput): Promise<GenerateQuestionsOutput> {
    const questionContextDescription = getContextDescription(input.questionContext);
    const filesContext = buildFilesContext(input.files);

    return await generateTfFlow({
        ...input,
        questionContextDescription,
        filesContext,
    } as any);
}

const generateTfFlow = ai.defineFlow(
    {
        name: "generateTfFlow",
        inputSchema: GenerateQuestionsInputSchema.extend({
            questionContextDescription: z.string(),
            filesContext: z.string(),
        }),
        outputSchema: QuestionsResponseSchema,
    },
    async (input: any) => {
        const { output } = await generateTfPrompt(input);
        return output!;
    }
);

// ============================================================================
// DISSERTATIVE/OPEN QUESTIONS
// ============================================================================

const generateDissertativePrompt = ai.definePrompt({
    name: "generateDissertativePrompt",
    input: {
        schema: GenerateQuestionsInputSchema.extend({
            questionContextDescription: z.string(),
            filesContext: z.string(),
        }),
    },
    output: { schema: QuestionsResponseSchema },
    prompt: `Voc√™ √© um especialista em criar quest√µes dissertativas para avalia√ß√µes educacionais.

CONTEXTO ACAD√äMICO: {{questionContextDescription}}

MATERIAL DE REFER√äNCIA:
{{filesContext}}

TAREFA: Gere {{count}} quest√µes dissertativas sobre {{subject}}{{#if academicLevel}} para o n√≠vel acad√™mico: {{academicLevel}}{{/if}}.

INSTRU√á√ïES:
1. LEIA CUIDADOSAMENTE E COMPLETAMENTE todo o material fornecido nos arquivos acima
2. BASE AS QUEST√ïES EXCLUSIVAMENTE no conte√∫do real presente nos arquivos
3. N√ÉO invente informa√ß√µes que n√£o est√£o nos arquivos
4. N√ÉO use conhecimento externo al√©m do conte√∫do dos arquivos fornecidos
5. Se o t√≠tulo da avalia√ß√£o menciona um tema mas os arquivos cont√™m outro tema, SIGA O CONTE√öDO DOS ARQUIVOS
6. Crie quest√µes que sigam o contexto acad√™mico especificado
7. Se NENHUM arquivo foi fornecido, retorne um erro informando que arquivos s√£o necess√°rios

REGRAS OBRIGAT√ìRIAS:
1. Cada quest√£o deve ter UMA pergunta aberta que estimule reflex√£o
2. Forne√ßa UMA resposta modelo completa e bem elaborada (sempre com is_correct: true)
3. A pergunta deve exigir an√°lise, s√≠ntese ou avalia√ß√£o, n√£o apenas memoriza√ß√£o
4. A resposta modelo deve ter entre 3 e 5 par√°grafos bem estruturados
5. Use linguagem apropriada para o n√≠vel acad√™mico
6. Evite perguntas que possam ser respondidas com sim/n√£o

FORMATO DE SA√çDA (JSON):
{
  "questions": [
    {
      "question": {
        "type": "open",
        "question": "Pergunta dissertativa completa e clara?"
      },
      "answers": [
        {"answer": "Resposta modelo completa com m√∫ltiplos par√°grafos bem estruturados explicando o tema em profundidade.", "is_correct": true}
      ]
    }
  ]
}

Gere as quest√µes agora:`,
});

export async function generateDissertativeQuestions(input: GenerateQuestionsInput): Promise<GenerateQuestionsOutput> {
    const questionContextDescription = getContextDescription(input.questionContext);
    const filesContext = buildFilesContext(input.files);

    return await generateDissertativeFlow({
        ...input,
        questionContextDescription,
        filesContext,
    } as any);
}

const generateDissertativeFlow = ai.defineFlow(
    {
        name: "generateDissertativeFlow",
        inputSchema: GenerateQuestionsInputSchema.extend({
            questionContextDescription: z.string(),
            filesContext: z.string(),
        }),
        outputSchema: QuestionsResponseSchema,
    },
    async (input: any) => {
        const { output } = await generateDissertativePrompt(input);
        return output!;
    }
);

// ============================================================================
// SUM QUESTIONS (Brazilian style with powers of 2)
// ============================================================================

const generateSumPrompt = ai.definePrompt({
    name: "generateSumPrompt",
    input: {
        schema: GenerateQuestionsInputSchema.extend({
            questionContextDescription: z.string(),
            filesContext: z.string(),
        }),
    },
    output: { schema: QuestionsResponseSchema },
    prompt: `Voc√™ √© um especialista em criar quest√µes de somat√≥ria para avalia√ß√µes educacionais.

CONTEXTO ACAD√äMICO: {{questionContextDescription}}

MATERIAL DE REFER√äNCIA:
{{filesContext}}

TAREFA: Gere {{count}} quest√µes de somat√≥ria sobre {{subject}}{{#if academicLevel}} para o n√≠vel acad√™mico: {{academicLevel}}{{/if}}.

INSTRU√á√ïES:
1. LEIA CUIDADOSAMENTE E COMPLETAMENTE todo o material fornecido nos arquivos acima
2. BASE AS QUEST√ïES EXCLUSIVAMENTE no conte√∫do real presente nos arquivos
3. N√ÉO invente informa√ß√µes que n√£o est√£o nos arquivos
4. N√ÉO use conhecimento externo al√©m do conte√∫do dos arquivos fornecidos
5. Se o t√≠tulo da avalia√ß√£o menciona um tema mas os arquivos cont√™m outro tema, SIGA O CONTE√öDO DOS ARQUIVOS
6. Crie quest√µes que sigam o contexto acad√™mico especificado
7. Se NENHUM arquivo foi fornecido, retorne um erro informando que arquivos s√£o necess√°rios

REGRAS OBRIGAT√ìRIAS PARA QUEST√ïES DE SOMAT√ìRIA:
1. Cada quest√£o deve ter entre 1 e 7 afirma√ß√µes
2. Os n√∫meros das alternativas DEVEM SER em ordem: 1, 2, 4, 8, 16, 32, 64 (pot√™ncias de 2)
3. NUNCA repita n√∫meros, NUNCA pule n√∫meros na sequ√™ncia
4. A soma das alternativas corretas N√ÉO PODE ultrapassar 99
5. Cada afirma√ß√£o deve ser independente e clara
6. O enunciado deve pedir para "Assinale as alternativas corretas" ou similar
7. Use o campo "number" com os valores exatos: 1, 2, 4, 8, 16, 32 ou 64

FORMATO DE SA√çDA (JSON):
{
  "questions": [
    {
      "question": {
        "type": "sum",
        "question": "Assinale as alternativas corretas sobre [tema]:"
      },
      "answers": [
        {"answer": "Primeira afirma√ß√£o.", "number": 1, "is_correct": true},
        {"answer": "Segunda afirma√ß√£o.", "number": 2, "is_correct": false},
        {"answer": "Terceira afirma√ß√£o.", "number": 4, "is_correct": true},
        {"answer": "Quarta afirma√ß√£o.", "number": 8, "is_correct": false},
        {"answer": "Quinta afirma√ß√£o.", "number": 16, "is_correct": true}
      ]
    }
  ]
}

IMPORTANTE: Verifique que a soma das alternativas corretas √© <= 99!

Gere as quest√µes agora:`,
});

export async function generateSumQuestions(input: GenerateQuestionsInput): Promise<GenerateQuestionsOutput> {
    const questionContextDescription = getContextDescription(input.questionContext);
    const filesContext = buildFilesContext(input.files);

    return await generateSumFlow({
        ...input,
        questionContextDescription,
        filesContext,
    } as any);
}

const generateSumFlow = ai.defineFlow(
    {
        name: "generateSumFlow",
        inputSchema: GenerateQuestionsInputSchema.extend({
            questionContextDescription: z.string(),
            filesContext: z.string(),
        }),
        outputSchema: QuestionsResponseSchema,
    },
    async (input: any) => {
        const { output } = await generateSumPrompt(input);
        return output!;
    }
);
